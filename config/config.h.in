#ifndef CONFIG_H
#define CONFIG_H

// AD&D Toolkit version @PROJECT_VERSION@
// Autogenerated header file, do not modify!!
// Header file: config.h
// Last modified: @LAST_COMMIT_DATE@

#include <exception>
#include <iostream>
#include <string>

namespace Adndtk
{
    namespace Metadata
    {
        static const char* library_name = "AdndTK";
        static const char* version = "@PROJECT_VERSION@";
        static const char* author = @LAST_COMMIT_AUTHOR_NAME@;
        static const char* desc = "@PROJECT_DESCRIPTION@";
        static const char* last_commit_date = @LAST_COMMIT_DATE@;
        static const char* last_commit_hash = @LAST_COMMIT_HASH@;
    }

    enum class DatabaseSource
    {
        file,
        memory
    };

    enum class ErrorHandler
    {
        standard_output,
        last_error,
        exception
    };
    
    enum class QueryType
    {
        json,
        plain
    };

    namespace Settings
    {
        static const char *database_path = "@ADNDTK_DATABASE_PATH@";
        static DatabaseSource database_source = @ADNDTK_DATABASE_SOURCE@;
        static ErrorHandler error_handler = ErrorHandler::@ADNDTK_ERROR_HANDLER@;
        static QueryType query_type = QueryType::@ADNDTK_KB_QUERY_OUTPUT@;
    }

    class Config
    {
    public:

        static Config& get_instance()
        {
            static Config _instance;
            return _instance;
        }
        Config(Config const&) = delete;
        void operator=(Config const&) = delete;

    private:
        Config() {}
    };

    class ErrorManager
    {
    public:

        static ErrorManager& get_instance()
        {
            static ErrorManager _instance;
            return _instance;
        }
        ErrorManager(ErrorManager const&) = delete;
        void operator=(ErrorManager const&) = delete;

        void error(const char *mesg)
        {
            if (Settings::error_handler == Adndtk::ErrorHandler::standard_output)
            {
                std::cout << mesg << std::endl;
            }
            else if (Settings::error_handler == Adndtk::ErrorHandler::last_error)
            {
                _lastError = mesg;
            }
            else if (Settings::error_handler == Adndtk::ErrorHandler::exception)
            {
                throw std::runtime_error(mesg);
            }
        }
        const std::string& last_error() { return _lastError; }

    private:
        ErrorManager() {}

        std::string     _lastError;
    };
}

#endif // CONFIG_H